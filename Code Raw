Raw code


#!pip install -U scikit-learn

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler,PolynomialFeatures
from sklearn.linear_model import LinearRegression
from google.colab import drive
import pandas as pd

# Mount Google Drive
drive.mount('/content/drive')

# Define the path to your file
file_path = '/content/drive/My Drive/kc_house_data.csv'

# Load the CSV file into a DataFrame
df = pd.read_csv(file_path)

# Display the first few rows to verify
df.head()


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# Import necessary libraries
from google.colab import drive
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score

# Mount Google Drive
drive.mount('/content/drive')

# Define the path to your file
file_path = '/content/drive/My Drive/kc_house_data.csv'

# Load the CSV file into a DataFrame
df = pd.read_csv(file_path)

# Data cleaning: Drop unnecessary columns
df.drop(columns=['id', 'date', 'zipcode'], inplace=True)

# Exploratory Data Analysis (EDA): Correlation heatmap and target distribution
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap of Features')
plt.show()

# Visualize the distribution of house prices
plt.figure(figsize=(8, 5))
sns.histplot(df['price'], kde=True)
plt.title('Distribution of House Prices')
plt.show()

# Define features (X) and target variable (y)
X = df[['sqft_living', 'bedrooms', 'bathrooms', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'lat', 'long']]
y = df['price']

# Split the data into training and test sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the pipeline for data preprocessing and modeling
pipeline = Pipeline([
    ('scaler', StandardScaler()),          # Standardizing the data
    ('poly_features', PolynomialFeatures(degree=2)), # Polynomial features (degree 2)
    ('ridge_reg', Ridge(alpha=1.0))        # Ridge regression
])

# Train the pipeline on the training data
pipeline.fit(X_train, y_train)

# Make predictions on the test data
y_pred = pipeline.predict(X_test)

# Compute evaluation metrics: Mean Squared Error (MSE) and R-squared (R2)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error (MSE): {mse:.2f}')
print(f'R-squared (R2): {r2:.4f}')

# Cross-validation for a more robust performance estimate
cv_scores = cross_val_score(pipeline, X_train, y_train, cv=5, scoring='neg_mean_squared_error')
cv_mse = -cv_scores.mean()
print(f'Cross-Validated MSE: {cv_mse:.2f}')

# Linear Regression Model for comparison
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)
y_pred_lin = lin_reg.predict(X_test)
mse_lin = mean_squared_error(y_test, y_pred_lin)
r2_lin = r2_score(y_test, y_pred_lin)

print(f'Linear Regression MSE: {mse_lin:.2f}')
print(f'Linear Regression R-squared: {r2_lin:.4f}')

# Calculate percentage improvement in prediction accuracy using MSE
improvement = ((mse_lin - mse) / mse_lin) * 100
print(f'Improvement in prediction accuracy: {improvement:.2f}%')

# Plotting the actual vs predicted values for visual comparison
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred, alpha=0.6)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'r--')  # Diagonal line
plt.title('Actual vs Predicted House Prices')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.show()

